apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: jira-create-issue
description: "Create a new Jira issue with specified fields"
inputs:
  jira-url:
    description: "Jira instance URL (e.g., https://your-domain.atlassian.net)"
    required: true
  jira-username:
    description: "Jira username or email address"
    required: true
  jira-token:
    description: "Jira API token"
    required: true
  project-key:
    description: "Project key where the issue will be created (e.g., MYPROJECT)"
    required: true
  issue-type:
    description: "Issue type name (e.g., Bug, Story, Task, Epic)"
    required: true
  issue-fields:
    description: "YAML object containing issue fields (will be converted to JSON for API)"
    required: true
  notify-users:
    description: "Whether to send notifications to users about the new issue"
    default: "true"
    required: false
  dry-run:
    description: "If true, validates the issue data without creating it"
    default: "false"
    required: false

outputs:
  issue-key:
    value: ${{ steps.create-issue.outputs.issue-key }}
    description: "The key of the created issue (e.g., PROJ-123)"
  issue-id:
    value: ${{ steps.create-issue.outputs.issue-id }}
    description: "The internal ID of the created issue"
  issue-url:
    value: ${{ steps.create-issue.outputs.issue-url }}
    description: "The URL to view the created issue"
  issue-data:
    value: ${{ steps.create-issue.outputs.issue-data }}
    description: "JSON object containing the full created issue data"

runs:
  using: composite
  steps:
    - id: create-issue
      name: Create Jira Issue
      uses: docker://alpine:3.22
      shell: sh
      run: |
        set -e

        # Install required tools
        apk add --no-cache curl jq yq

        # Validate inputs
        if [ -z "${{ inputs.jira-url }}" ]; then
          echo "Error: jira-url is required"
          exit 1
        fi

        if [ -z "${{ inputs.jira-username }}" ]; then
          echo "Error: jira-username is required"
          exit 1
        fi

        if [ -z "${{ inputs.jira-token }}" ]; then
          echo "Error: jira-token is required"
          exit 1
        fi

        if [ -z "${{ inputs.project-key }}" ]; then
          echo "Error: project-key is required"
          exit 1
        fi

        if [ -z "${{ inputs.issue-type }}" ]; then
          echo "Error: issue-type is required"
          exit 1
        fi

        if [ -z "${{ inputs.issue-fields }}" ]; then
          echo "Error: issue-fields is required"
          exit 1
        fi

        # Clean up URL (remove trailing slash if present)
        JIRA_URL="${{ inputs.jira-url }}"
        JIRA_URL="${JIRA_URL%/}"

        # Convert YAML issue-fields to JSON
        echo "Converting YAML issue-fields to JSON..."
        echo '${{ inputs.issue-fields }}' | yq -o=json > /tmp/issue_fields.json

        # Validate the converted JSON
        if ! jq . /tmp/issue_fields.json > /dev/null 2>&1; then
          echo "Error: Invalid YAML in issue-fields"
          cat /tmp/issue_fields.json
          exit 1
        fi

        ISSUE_FIELDS_JSON=$(cat /tmp/issue_fields.json)
        echo "Issue fields JSON: $ISSUE_FIELDS_JSON"

        # Convert description to ADF format if it's a plain string
        if echo "$ISSUE_FIELDS_JSON" | jq -e '.description' > /dev/null 2>&1; then
          DESCRIPTION_TYPE=$(echo "$ISSUE_FIELDS_JSON" | jq -r '.description | type')
          if [ "$DESCRIPTION_TYPE" = "string" ]; then
            echo "Converting plain text description to Atlassian Document Format..."
            
            # Create ADF format directly from the JSON field
            ISSUE_FIELDS_JSON=$(echo "$ISSUE_FIELDS_JSON" | jq '.description |= {
              "version": 1,
              "type": "doc", 
              "content": [
                {
                  "type": "paragraph",
                  "content": [
                    {
                      "type": "text",
                      "text": .
                    }
                  ]
                }
              ]
            }')
            echo "Converted description to ADF format"
          fi
        fi

        # Validate project exists and get project info
        echo "Validating project: ${{ inputs.project-key }}"
        PROJECT_URL="${JIRA_URL}/rest/api/3/project/${{ inputs.project-key }}"

        PROJECT_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
          -X GET \
          -H "Accept: application/json" \
          -u "${{ inputs.jira-username }}:${{ inputs.jira-token }}" \
          "$PROJECT_URL")

        PROJECT_HTTP_STATUS=$(echo "$PROJECT_RESPONSE" | tail -n1 | sed 's/.*HTTP_STATUS://')
        PROJECT_RESPONSE_BODY=$(echo "$PROJECT_RESPONSE" | sed '$d')

        if [ "$PROJECT_HTTP_STATUS" -ne 200 ]; then
          echo "Error: Project validation failed with status $PROJECT_HTTP_STATUS"
          echo "Response: $PROJECT_RESPONSE_BODY"
          exit 1
        fi

        echo "✓ Project ${{ inputs.project-key }} exists"

        # Get issue types for project to validate issue type
        echo "Validating issue type: ${{ inputs.issue-type }}"
        ISSUE_TYPES_URL="${JIRA_URL}/rest/api/3/issue/createmeta/${{ inputs.project-key }}/issuetypes"

        ISSUE_TYPES_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
          -X GET \
          -H "Accept: application/json" \
          -u "${{ inputs.jira-username }}:${{ inputs.jira-token }}" \
          "$ISSUE_TYPES_URL")

        ISSUE_TYPES_HTTP_STATUS=$(echo "$ISSUE_TYPES_RESPONSE" | tail -n1 | sed 's/.*HTTP_STATUS://')
        ISSUE_TYPES_RESPONSE_BODY=$(echo "$ISSUE_TYPES_RESPONSE" | sed '$d')

        if [ "$ISSUE_TYPES_HTTP_STATUS" -ne 200 ]; then
          echo "Error: Issue types validation failed with status $ISSUE_TYPES_HTTP_STATUS"
          echo "Response: $ISSUE_TYPES_RESPONSE_BODY"
          exit 1
        fi

        # Check if issue type exists
        ISSUE_TYPE_ID=$(echo "$ISSUE_TYPES_RESPONSE_BODY" | jq -r --arg type "${{ inputs.issue-type }}" '.issueTypes[] | select(.name == $type) | .id')

        if [ -z "$ISSUE_TYPE_ID" ] || [ "$ISSUE_TYPE_ID" = "null" ]; then
          echo "Error: Issue type '${{ inputs.issue-type }}' not found in project ${{ inputs.project-key }}"
          echo "Available issue types:"
          echo "$ISSUE_TYPES_RESPONSE_BODY" | jq -r '.issueTypes[] | "  - \(.name)"'
          exit 1
        fi

        echo "✓ Issue type '${{ inputs.issue-type }}' is valid (ID: $ISSUE_TYPE_ID)"

        # Build the issue creation payload
        CREATE_PAYLOAD=$(jq -n \
          --arg projectKey "${{ inputs.project-key }}" \
          --arg issueTypeId "$ISSUE_TYPE_ID" \
          --argjson fields "$ISSUE_FIELDS_JSON" \
          --argjson notifyUsers "${{ inputs.notify-users }}" \
          '{
            fields: ({
              project: {
                key: $projectKey
              },
              issuetype: {
                id: $issueTypeId
              }
            } + $fields),
            notifyUsers: $notifyUsers
          }')

        echo "Create payload:"
        echo "$CREATE_PAYLOAD" | jq .

        # Show what would be created if dry-run
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo ""
          echo "DRY RUN: Would create issue with the following data:"
          echo "  Project: ${{ inputs.project-key }}"
          echo "  Issue Type: ${{ inputs.issue-type }} (ID: $ISSUE_TYPE_ID)"
          echo "  Fields: $ISSUE_FIELDS_JSON"
          echo ""
          echo "Payload validation successful - issue can be created"
          
          # Set dummy outputs for dry run
          echo "DRY-RUN-KEY" > "$CLOUDBEES_OUTPUTS/issue-key"
          echo "DRY-RUN-ID" > "$CLOUDBEES_OUTPUTS/issue-id"
          echo "${JIRA_URL}/browse/DRY-RUN-KEY" > "$CLOUDBEES_OUTPUTS/issue-url"
          echo '{"key":"DRY-RUN-KEY","id":"DRY-RUN-ID","self":"'${JIRA_URL}'/rest/api/3/issue/DRY-RUN-ID"}' > "$CLOUDBEES_OUTPUTS/issue-data"
          exit 0
        fi

        # Create the issue
        echo "Creating Jira issue..."
        CREATE_URL="${JIRA_URL}/rest/api/3/issue"

        CREATE_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" \
          -X POST \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -u "${{ inputs.jira-username }}:${{ inputs.jira-token }}" \
          -d "$CREATE_PAYLOAD" \
          "$CREATE_URL")

        CREATE_HTTP_STATUS=$(echo "$CREATE_RESPONSE" | tail -n1 | sed 's/.*HTTP_STATUS://')
        CREATE_RESPONSE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')

        if [ "$CREATE_HTTP_STATUS" -ne 201 ]; then
          echo "Error: Issue creation failed with status $CREATE_HTTP_STATUS"
          echo "Response: $CREATE_RESPONSE_BODY"
          
          # Try to extract useful error information
          if echo "$CREATE_RESPONSE_BODY" | jq . > /dev/null 2>&1; then
            echo ""
            echo "Detailed errors:"
            echo "$CREATE_RESPONSE_BODY" | jq -r '.errors // {} | to_entries[] | "  \(.key): \(.value)"' 2>/dev/null || true
            echo "$CREATE_RESPONSE_BODY" | jq -r '.errorMessages[]? | "  - \(.)"' 2>/dev/null || true
          fi
          
          exit 1
        fi

        # Extract issue information
        ISSUE_KEY=$(echo "$CREATE_RESPONSE_BODY" | jq -r '.key')
        ISSUE_ID=$(echo "$CREATE_RESPONSE_BODY" | jq -r '.id')
        ISSUE_SELF=$(echo "$CREATE_RESPONSE_BODY" | jq -r '.self')
        ISSUE_URL="${JIRA_URL}/browse/${ISSUE_KEY}"

        echo ""
        echo "✓ Successfully created issue:"
        echo "  Key: $ISSUE_KEY"
        echo "  ID: $ISSUE_ID"
        echo "  URL: $ISSUE_URL"

        # Set outputs
        echo "$ISSUE_KEY" > "$CLOUDBEES_OUTPUTS/issue-key"
        echo "$ISSUE_ID" > "$CLOUDBEES_OUTPUTS/issue-id"
        echo "$ISSUE_URL" > "$CLOUDBEES_OUTPUTS/issue-url"
        echo "$CREATE_RESPONSE_BODY" > "$CLOUDBEES_OUTPUTS/issue-data"

        echo ""
        echo "Issue creation completed successfully!"
